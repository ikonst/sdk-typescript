name: Continuous Integration

on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - main
      - 'releases/*'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IS_OFFICIAL_REPO: ${{ github.repository == 'temporalio/sdk-typescript' }}
  # Is it the official main branch, or an official release branches?
  IS_MAIN_BRANCH: |
    ${{
      github.repository == 'temporalio/sdk-typescript'
        && (github.ref == 'refs/heads/main'
            || startsWith(github.ref, 'refs/tags/')
            || startsWith(github.ref, 'refs/heads/releases'))
        && github.event_name != 'pull_request'
    }}
  TESTS_CLI_VERSION: 'v0.12.0'
jobs:
  # Compile native bridge code for each target platform.
  # Uploads the native library for each target as a build artifact.
  compile-native-binaries:
    strategy:
      fail-fast: true
      matrix:
        include:
          # For Linux targets, use Buildjet's Unbuntu 18.04 builders to preserve compatibility with glibc 2.17
          - platform: linux-intel
            runner: buildjet-2vcpu-ubuntu-1804
            target: x86_64-unknown-linux-gnu
          - platform: linux-arm
            runner: buildjet-2vcpu-ubuntu-1804
            target: aarch64-unknown-linux-gnu
            rustflags: '-C linker=aarch64-linux-gnu-gcc'
          - platform: macos-intel
            runner: macos-12
            target: x86_64-apple-darwin
          - platform: macos-arm
            runner: macos-14
            target: aarch64-apple-darwin
          - platform: windows-intel
            runner: windows-latest
            target: x86_64-pc-windows-msvc
    name: Compile native binaries (${{ matrix.platform }})
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash
    steps:
      - name: 'Checkout code'
        # Starting with v4.0.0, actions/checkout requires Node 20, which doesn't work on Ubuntu 18.04 runners
        # FIXME: Update once we drop support for glibc 2.17 (planned for 1.10.0)
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: 'Cache index.node'
        id: cached-artifact
        uses: actions/cache@v3
        with:
          path: ./packages/core-bridge/releases
          key: corebridge-artifactcache-${{ matrix.platform }}-${{ hashFiles('./packages/core-bridge/**/Cargo.lock', './packages/core-bridge/**/*.rs') }}

      - name: Install Rust
        if: steps.cached-artifact.outputs.cache-hit != 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Install protoc
        if: steps.cached-artifact.outputs.cache-hit != 'true'
        # arduino/setup-protoc@v3 require Node 20, which doesn't work on Ubuntu 18.04 runners
        uses: arduino/setup-protoc@v2
        with:
          # TODO: Upgrade proto once https://github.com/arduino/setup-protoc/issues/99 is fixed
          version: '23.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Print libc version
        if: (steps.cached-artifact.outputs.cache-hit != 'true') && startsWith(matrix.platform, 'linux')
        run: ldd --version

      - name: Install gcc-aarch64-linux-gnu
        if: (steps.cached-artifact.outputs.cache-hit != 'true') && (matrix.platform == 'linux-arm')
        run: sudo apt update && sudo apt install -y gcc-aarch64-linux-gnu

      - name: Rust Cargo and Build cache
        if: steps.cached-artifact.outputs.cache-hit != 'true'
        # Starting with 2.7.2, rust-cache requires Node 20, which doesn't work on Ubuntu 18.04 runners
        uses: Swatinem/rust-cache@v2.7.1
        with:
          workspaces: packages/core-bridge -> target
          prefix-key: corebridge-buildcache
          shared-key: ${{ matrix.platform }}
          env-vars: ''
          # save-if: ${{ env.IS_MAIN_BRANCH }}

      - name: Compile rust code
        if: steps.cached-artifact.outputs.cache-hit != 'true'
        working-directory: ./packages/core-bridge
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
        run: |
          cargo build --release --target ${{ matrix.target }}
          # find ./target/${{ matrix.target }}/ -ls
          mkdir -p ./releases/${{ matrix.target }}
          for i in ./target/${{ matrix.target }}/release/{libtemporal_sdk_typescript_bridge.{dylib,so},temporal_sdk_typescript_bridge.dll} ; do
            # ls [[ -x $i ]] -l  ${{ matrix.target }}
            cp -a $i  ./releases/${{ matrix.target }}/index.node || true
          done

      # Starting with v4.0.0, actions/upload-artifact requires Node 20, which doesn't work on Ubuntu 18.04 runners
      - uses: actions/upload-artifact@v3
        with:
          name: corebridge-native-${{ matrix.platform }}
          # Actual file will be named ${{ matrix.target }}/index.node
          path: ./packages/core-bridge/releases/*/index.node

  # Build all @temporalio/* packages
  # Upload the built packages as a Verdaccio repository.
  build-packages:
    needs:
      - compile-native-binaries
    name: Build Packages
    strategy:
      # Using a matrix here ensure that Rust-related actions below can be easily be copied from the
      # compile-binairies job and that the Rust build cache will be usable
      matrix:
        include:
          - platform: linux-intel
            runner: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Download core-bridge native libraries
        uses: actions/download-artifact@v3
        with:
          path: ./packages/core-bridge/releases/tmp

      - name: Put native files into place
        working-directory: ./packages/core-bridge/releases
        run: |
          mv tmp/corebridge-*/* ./
          rm -rf tmp

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Get NPM cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Restore NPM cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: npm-main-linux-intel-${{ hashFiles('./package-lock.json') }}
          restore-keys: |
            npm-main-linux-intel-

      - name: Download dependencies
        # Make up to 3 attempts to install NPM dependencies, to work around transient NPM errors
        run: |
          npm ci --ignore-scripts --verbose || npm ci --ignore-scripts --verbose || npm ci --ignore-scripts --verbose

      - name: Compile code
        run: npm run build -- --ignore @temporalio/core-bridge

      - name: Publish to Verdaccio
        run: node scripts/publish-to-verdaccio.js --registry-dir ./tmp/registry

      - name: Save Verdaccio repo artifact
        uses: actions/upload-artifact@v3
        with:
          name: verdaccio-repo
          path: ./tmp/registry/storage

  # Run integration tests. Uses the native binaries built in compile-native-binaries,
  # but build `@temporalio/*` packages locally.
  integration-tests:
    needs:
      - compile-native-binaries
    strategy:
      fail-fast: false
      matrix:
        node: [14, 16, 18, 20]
        platform: [linux-intel, linux-arm, macos-intel, macos-arm, windows-intel]
        reuse-v8-context: [true, false]
        server: [cli] # FIXME: Add 'cloud'
        include:
          - platform: linux-intel
            runner: ubuntu-latest
          - platform: linux-arm
            runner: buildjet-4vcpu-ubuntu-2204-arm
          - platform: macos-intel
            runner: macos-12
          - platform: macos-arm
            runner: macos-14
          - platform: windows-intel
            runner: windows-latest
        exclude:
          - platform: macos-arm
            node: 14
    runs-on: ${{ matrix.runner }}
    name: Run Integration Tests (${{ matrix.platform }}, Node ${{ matrix.node }}, Reuse V8 Context ${{ matrix.reuse-v8-context }})
    defaults:
      run:
        shell: bash
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Download core-bridge native libraries
        uses: actions/download-artifact@v3
        with:
          name: corebridge-native-${{ matrix.platform }}
          path: ./packages/core-bridge/releases

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Get NPM cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Restore NPM cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: npm-main-${{ matrix.platform }}-${{ hashFiles('./package-lock.json') }}
          restore-keys: |
            npm-main-${{ matrix.platform }}-

      - name: Download dependencies
        # Make up to 3 attempts to install NPM dependencies, to work around transient NPM errors
        run: |
          npm ci --ignore-scripts --verbose || npm ci --ignore-scripts --verbose || npm ci --ignore-scripts --verbose

      - name: Compile code
        run: npm run build -- --ignore @temporalio/core-bridge

      - name: Install Temporal CLI
        if: ${{ matrix.server == 'cli' }}
        uses: temporalio/setup-temporal@v0

      - name: Run Temporal CLI
        if: ${{ matrix.server == 'cli' }}
        shell: bash
        run: |
          temporal server start-dev --headless &

      # FIXME: Remove this once memory check is completed -JWH
      - name: Print out Node heap statistics
        run: node -e 'console.log(v8.getHeapStatistics())'

      - name: Run Tests
        run: npm test
        env:
          RUN_INTEGRATION_TESTS: ${{ matrix.server == 'cli' }}
          REUSE_V8_CONTEXT: ${{ matrix.reuse-v8-context }}

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: integration-tests-${{ matrix.platform }}-node${{ matrix.node }}-${{ matrix.server }}-logs
          path: |
            ~/.npm/_logs/
            C:\npm\cache\_logs\

  # Tests that npm init @temporalio results in a working worker and client
  test-npm-init:
    needs: build-packages
    strategy:
      fail-fast: false
      matrix:
        node: [14, 16, 18, 20]
        platform: [linux-intel, linux-arm, macos-intel, macos-arm, windows-intel]
        sample: [hello-world, fetch-esm, hello-world-mtls]
        server: [cli, cloud]
        exclude:
          # Disable non-mtls tests on cloud
          - sample: hello-world
            server: cloud
          # Disable mtls tests on cli
          - sample: hello-world-mtls
            server: cli
          - sample: fetch-esm
            server: cloud
          # FIXME: investigate why 'fetch-esm' always hangs on Windows
          - sample: fetch-esm
            platform: windows-intel
          - platform: macos-arm
            node: 14
          # FIXME: Disable 'cloud' if 'TEMPORAL_CLIENT_CERT' isn't set
          # - server: "${{ env.TEMPORAL_CLIENT_CERT == '' && 'cloud' || 'ignore' }}"
        include:
          - platform: linux-intel
            runner: ubuntu-latest
          - platform: linux-arm
            runner: buildjet-4vcpu-ubuntu-2204-arm
          - platform: macos-intel
            runner: macos-12
          - platform: macos-arm
            runner: macos-14
          - platform: windows-intel
            runner: windows-latest
    runs-on: ${{ matrix.runner }}
    name: Run Samples Tests - ${{ matrix.sample }} (${{ matrix.platform }}, Node ${{ matrix.node }}, ${{ matrix.server }})
    env:
      TEMPORAL_CLIENT_CERT: ${{ secrets.TEMPORAL_CLIENT_CERT }}
      TEMPORAL_CLIENT_KEY: ${{ secrets.TEMPORAL_CLIENT_KEY }}
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3
        with:
          # We don't need the core submodule here since won't build the project
          submodules: false
        if: ${{ matrix.server != 'cloud' || env.TEMPORAL_CLIENT_CERT != '' }}

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
        if: ${{ matrix.server != 'cloud' || env.TEMPORAL_CLIENT_CERT != '' }}

      - name: Get NPM cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
        if: ${{ matrix.server != 'cloud' || env.TEMPORAL_CLIENT_CERT != '' }}

      - name: Restore NPM cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: npm-main-${{ matrix.platform }}-${{ hashFiles('./package-lock.json') }}
          restore-keys: |
            npm-main-${{ matrix.platform }}-
        if: ${{ matrix.server != 'cloud' || env.TEMPORAL_CLIENT_CERT != '' }}

      # No need to compile anything, we just need the package ./scripts and their dependencies
      - name: Install dependencies without compilation
        run: |
          npm ci --ignore-scripts --verbose || npm ci --ignore-scripts --verbose || npm ci --ignore-scripts --verbose
        if: ${{ matrix.server != 'cloud' || env.TEMPORAL_CLIENT_CERT != '' }}

      - name: Restore Verdaccio repo artifact
        uses: actions/download-artifact@v3
        with:
          name: verdaccio-repo
          path: ./tmp/registry/storage
        if: ${{ matrix.server != 'cloud' || env.TEMPORAL_CLIENT_CERT != '' }}

      # Note: here, `npx create` fails on windows if shell is bash.
      - name: Instantiate sample project using verdaccio artifacts
        run: node scripts/init-from-verdaccio.js --registry-dir ./tmp/registry --sample https://github.com/temporalio/samples-typescript/tree/next/${{ matrix.sample }} --target-dir ${{ runner.temp }}/example
        if: ${{ matrix.server != 'cloud' || env.TEMPORAL_CLIENT_CERT != '' }}

      - name: Install Temporal CLI
        if: ${{ matrix.server == 'cli' }}
        uses: temporalio/setup-temporal@v0

      - name: Run Temporal CLI
        if: ${{ matrix.server == 'cli' }}
        shell: bash
        run: |
          temporal server start-dev --headless &

      # FIXME: Remove this once memory check is completed -JWH
      - name: Print out Node heap statistics
        run: node -e 'console.log(v8.getHeapStatistics()) ; console.log(v8.getHeapStatistics())'
        working-directory: ${{ runner.temp }}/example
        if: ${{ matrix.server != 'cloud' || env.TEMPORAL_CLIENT_CERT != '' }}

        # We write the certs to disk because it serves the sample. Written into /tmp/temporal-certs
      - name: Create certs dir
        shell: bash
        run: node scripts/create-certs-dir.js "${{ runner.temp }}/certs"
        if: ${{ matrix.server == 'cloud' && env.TEMPORAL_CLIENT_CERT != '' }}

      - name: Test run a workflow (non-cloud)
        run: node scripts/test-example.js --work-dir "${{ runner.temp }}/example"
        shell: bash
        if: ${{ matrix.server == 'cli' }}

      - name: Test run a workflow (cloud)
        run: node scripts/test-example.js --work-dir "${{ runner.temp }}/example"
        shell: bash
        env:
          # TODO: get a permanent cloud namespace for CI
          # These env vars are used by the hello-world-mtls sample
          TEMPORAL_ADDRESS: sdk-ci.a2dd6.tmprl.cloud
          TEMPORAL_NAMESPACE: sdk-ci.a2dd6
          TEMPORAL_CLIENT_CERT_PATH: ${{ runner.temp }}/certs/client.pem
          TEMPORAL_CLIENT_KEY_PATH: ${{ runner.temp }}/certs/client.key
          TEMPORAL_TASK_QUEUE: ${{ format('{0}-{1}-{2}', matrix.platform, matrix.node, matrix.sample) }}
        if: ${{ matrix.server == 'cloud' && env.TEMPORAL_CLIENT_CERT != '' }}

      - name: Destroy certs dir
        run: rm -rf ${{ runner.temp }}/certs
        shell: bash
        if: always() && ${{ matrix.server == 'cloud' && env.TEMPORAL_CLIENT_CERT != '' }}
        continue-on-error: true

  # Runs the features repo tests with this repo's current SDK code
  # FIXME: Update this job to reuse native build artifacts from compile-native-binaries
  features-tests:
    uses: temporalio/features/.github/workflows/typescript.yaml@main
    with:
      typescript-repo-path: ${{github.event.pull_request.head.repo.full_name}}
      version: ${{github.event.pull_request.head.ref}}
      version-is-repo-ref: true

  stress-tests:
    # FIXME: Update this job to reuse native build artifacts from compile-native-binaries
    uses: ./.github/workflows/stress.yml
    with:
      test-type: ci-stress
      test-timeout-minutes: 20
      reuse-v8-context: false

  stress-tests-reuse-context:
    # FIXME: Update this job to reuse native build artifacts from compile-native-binaries
    uses: ./.github/workflows/stress.yml
    with:
      test-type: ci-stress
      test-timeout-minutes: 20
      reuse-v8-context: true

  # Run TS linting and ts-prune to find unused code
  lint-and-prune:
    strategy:
      # Using a matrix here ensure that Rust-related actions below can be easily be copied from the
      # compile-binairies job and that the Rust build cache will be usable
      matrix:
        include:
          - platform: linux-intel
            runner: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Get NPM cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Restore NPM cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          restore-keys: |
            npm-main-
          key: npm-main-${{ hashFiles('./package-lock.json') }}
          enableCrossOsArchive: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Install protoc
        # arduino/setup-protoc@v3 require Node 20, which doesn't work on Ubuntu 18.04 runners
        uses: arduino/setup-protoc@v2
        with:
          # TODO: Upgrade proto once https://github.com/arduino/setup-protoc/issues/99 is fixed
          version: '23.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Rust Cargo and Build cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: packages/core-bridge -> target
          prefix-key: corebridge-buildcache
          shared-key: ${{ matrix.platform }}
          env-vars: ''
          save-if: false

      - name: Download dependencies
        run: |
          npm ci --ignore-scripts --verbose || npm ci --ignore-scripts --verbose || npm ci --ignore-scripts --verbose

      # eslint-import-resolver-typescript requires packages to be built
      - name: Compile all non-rust code
        run: npm run build -- --ignore @temporalio/core-bridge

      - run: npm run lint.check
      - run: npm run lint.prune

  build-docs:
    strategy:
      # Using a matrix here ensure that Rust-related actions below can be easily be copied from the
      # compile-binairies job and that the Rust build cache will be usable
      matrix:
        include:
          - platform: linux-intel
            runner: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Get NPM cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Restore NPM cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: npm-main-${{ matrix.platform }}-${{ hashFiles('./package-lock.json') }}
          restore-keys: |
            npm-main-${{ matrix.platform }}-

      # Don't build during install phase since we're going to explicitly build
      - name: Download dependencies
        # Make up to 3 attempts to install NPM dependencies, to work around transient NPM errors
        run: |
          npm ci --ignore-scripts --verbose || npm ci --ignore-scripts --verbose || npm ci --ignore-scripts --verbose

      - run: npm run build -- --ignore @temporalio/core-bridge

      # Do docs stuff (only on one host)
      - name: Build docs
        run: npm run docs
        env:
          ALGOLIA_API_KEY: ${{ secrets.ALGOLIA_API_KEY }}

      - name: Deploy prod docs # TODO: only deploy prod docs when we publish a new version
        if: ${{ env.IS_MAIN_BRANCH }}
        run: npx vercel deploy packages/docs/build -t ${{ secrets.VERCEL_TOKEN }} --name typescript --scope temporal --prod --yes

      - name: Deploy draft docs
        # Don't run on forks, since secrets won't be available, and command will fail
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository && github.ref != 'refs/heads/main' }}
        run: npx vercel deploy packages/docs/build -t ${{ secrets.VERCEL_TOKEN }} --name typescript --scope temporal --yes
